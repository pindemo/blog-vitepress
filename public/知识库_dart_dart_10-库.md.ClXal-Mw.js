import{_ as i,c as a,a5 as t,o as e}from"./chunks/framework.C_A3z-40.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"知识库/dart/dart/10-库.md","filePath":"知识库/dart/dart/10-库.md","lastUpdated":1726797233000}'),l={name:"知识库/dart/dart/10-库.md"};function n(p,s,h,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="库" tabindex="-1">库 <a class="header-anchor" href="#库" aria-label="Permalink to &quot;库&quot;">​</a></h2><p><code>import</code> 和 <code>library</code> 关键字可以帮助创建模块化和可共享的代码库。 代码库不仅只是提供 API 而且还起到了封装的作用：以下划线（<code>_</code>）开头的成员仅在代码库中可见。 每个 Dart 程序都是一个库，即便没有使用关键字 library 指定。</p><h3 id="使用库" tabindex="-1">使用库 <a class="header-anchor" href="#使用库" aria-label="Permalink to &quot;使用库&quot;">​</a></h3><p>使用 <code>import</code> 来指定命名空间以便其它库可以访问。 例如导入代码库 dart:html 来使用 Dart Web 中相关 API：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dart:html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>import</code> 的唯一参数是用于<strong>指定代码库的 URI</strong>，对于 Dart 内置的库，使用 <code>dart:xxxxxx</code> 的形式，而对于其它的库，可以使用一个<strong>文件系统路径</strong>或者以 <code>package:xxxxxx</code> 的形式。 <code>package:xxxxxx</code> 指定的库通过包管理器（比如 pub 工具）来提供：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:test/test.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="指定库前缀" tabindex="-1">指定库前缀 <a class="header-anchor" href="#指定库前缀" aria-label="Permalink to &quot;指定库前缀&quot;">​</a></h4><p>如果导入的两个代码库有冲突的标识符，可以为其中一个指定前缀，例如 library1 和 library2 都有 Element 类，可以这么处理：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib1/lib1.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib2/lib2.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uses Element from lib1.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uses Element from lib2.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h4 id="导入库的一部分" tabindex="-1">导入库的一部分 <a class="header-anchor" href="#导入库的一部分" aria-label="Permalink to &quot;导入库的一部分&quot;">​</a></h4><p>如果只想使用库中的一部分，可以有选择地导入代码库：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Import only foo.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib1/lib1.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Import all names EXCEPT foo.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:lib2/lib2.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo;</span></span></code></pre></div><h4 id="延迟加载库" tabindex="-1">延迟加载库 <a class="header-anchor" href="#延迟加载库" aria-label="Permalink to &quot;延迟加载库&quot;">​</a></h4><p>延迟加载（懒加载）允许在需要时再去加载代码库。延迟加载使用场景：</p><ul><li>减少应用初始化时间。</li><li>A/B 测试，如测试各种算法的不同实现。</li><li>加载很少会使用到的功能。</li></ul><blockquote><p>目前只有 dart compile js 支持延迟加载，Flutter 和 Dart VM 目前都不支持延迟加载。</p></blockquote><p>使用 <code>deferred as</code> 关键字来标识需要延时加载的代码库：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:greetings/hello.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello;</span></span></code></pre></div><p>当需要使用到库中 API 时先调用 <code>loadLibrary</code> 函数加载库：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadLibrary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hello.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>loadLibrary</code> 函数可以调用多次也没关系，代码库只会被加载一次。</p></blockquote><p>当使用延迟加载的时候需要牢记以下几点：</p><ul><li>延迟加载的代码库中的常量在代码库被加载的时候才会导入，未加载时不会导入。</li><li>导入文件的时候无法使用延迟加载库中的类型。如果要使用类型，需要把接口类型转移到另一个库中然后让两个库都分别导入这个接口库。</li><li>Dart 会隐式地将 loadLibrary() 导入到使用了 <code>deferred as</code> 命名空间 的类中。</li><li>loadLibrary() 函数返回的是一个 Future。</li></ul><h3 id="实现库" tabindex="-1">实现库 <a class="header-anchor" href="#实现库" aria-label="Permalink to &quot;实现库&quot;">​</a></h3>`,25)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
