import{_ as n,c as l,j as a,a as p,G as t,a4 as e,o as h,B as r}from"./chunks/framework.bh9iDcjP.js";const m=JSON.parse('{"title":"git","description":"","frontmatter":{},"headers":[],"relativePath":"知识库/git/main.md","filePath":"知识库/git/main.md","lastUpdated":1726195434000}'),k={name:"知识库/git/main.md"};function d(g,s,c,o,u,F){const i=r("ArticleMetadata");return h(),l("div",null,[s[0]||(s[0]=a("h1",{id:"git",tabindex:"-1"},[p("git "),a("a",{class:"header-anchor",href:"#git","aria-label":'Permalink to "git"'},"​")],-1)),t(i),s[1]||(s[1]=e(`<h2 id="git创建分支并提交" tabindex="-1">git创建分支并提交 <a class="header-anchor" href="#git创建分支并提交" aria-label="Permalink to &quot;git创建分支并提交&quot;">​</a></h2><h3 id="_1、-创建分支" tabindex="-1">1、 创建<a href="https://so.csdn.net/so/search?q=%E5%88%86%E6%94%AF&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">分支</a> <a class="header-anchor" href="#_1、-创建分支" aria-label="Permalink to &quot;1、 创建[分支](https://so.csdn.net/so/search?q=分支&amp;spm=1001.2101.3001.7020)&quot;">​</a></h3><p>​ 在 Git 中，分支是项目开发的不同线路，它们允许团队在不影响主线（主分支）的情况下进行并行开发。创建分支的命令如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个新分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到新分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者使用以下命令创建并切换到新分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git checkout -b new-feature</span></span></code></pre></div><blockquote><p>以上命令创建了一个名为 <code>new-feature</code> 的新分支，并将工作目录切换到该分支。</p></blockquote><h3 id="_2、提交更改" tabindex="-1">2、提交更改 <a class="header-anchor" href="#_2、提交更改" aria-label="Permalink to &quot;2、提交更改&quot;">​</a></h3><p>​ 在新分支上进行工作后，需要将更改提交到版本控制系统。以下是提交更改的基本命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加所有更改到暂存区</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交更改到本地仓库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Add new feature&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 推送更改到远程仓库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-feature</span></span></code></pre></div><blockquote><p>上述命令将更改添加到暂存区，然后提交到本地仓库，并最后推送到远程仓库。</p></blockquote><h3 id="_3、合并主分支" tabindex="-1">3、合并主分支 <a class="header-anchor" href="#_3、合并主分支" aria-label="Permalink to &quot;3、合并主分支&quot;">​</a></h3><p>​ 一旦在新分支上完成了工作，通常需要将其合并回主分支。使用以下命令合并分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换回主分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 合并新分支到主分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 推送主分支到远程仓库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><blockquote><p>上述命令将工作目录切换回主分支，然后将 <code>new-feature</code> 分支合并到主分支，并将合并后的更改推送到远程仓库。</p></blockquote><h3 id="_4、解决冲突" tabindex="-1">4、解决冲突 <a class="header-anchor" href="#_4、解决冲突" aria-label="Permalink to &quot;4、解决冲突&quot;">​</a></h3><p>​ 在分支合并过程中，如果两个分支都修改了同一部分的代码，可能会发生冲突。解决冲突的步骤如下：</p><p>​ 1、Git 会标记冲突的文件。手动编辑文件，解决冲突。</p><p>​ 2、添加解决冲突后的文件到暂存区：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">conflicted-fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>​ 3、提交解决冲突后的更改：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Resolve merge conflict&quot;</span></span></code></pre></div><p>​ 4、继续合并：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-feature</span></span></code></pre></div><h3 id="_5、删除分支" tabindex="-1">5、删除分支 <a class="header-anchor" href="#_5、删除分支" aria-label="Permalink to &quot;5、删除分支&quot;">​</a></h3><p>​ 完成分支的合并后，可以删除不再需要的分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除本地分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除远程分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-feature</span></span></code></pre></div><h1 id="多个commit合并成一个" tabindex="-1">多个commit合并成一个 <a class="header-anchor" href="#多个commit合并成一个" aria-label="Permalink to &quot;多个commit合并成一个&quot;">​</a></h1>`,26)),t(i),s[2]||(s[2]=e(`<ul><li>输入git log -8 //查看前8条提交</li><li>按大写ZZ退出日志查看，输入git rebase -i HEAD~3 //表示最近的3条合并成一条(如果失败，检查有没有为提交或暂存的修改，提交或暂存它们)</li><li>输入完后界面如下，按i进入编译模式，将第2，3个pick改为s，表示将后2条合并到第一条中，然后按esc退出编译模式，然后按大写ZZ，再按ZZ彻底退出 ctrl+w 快速删了pick</li></ul><p><img src="https://raw.githubusercontent.com/nsnans/picGo-bed/main/vitepress_1x/202407011347740.png" alt="alt text" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/nsnans/picGo-bed/main/vitepress_1x/202407011348771.png" alt="alt text" loading="lazy"></p><ul><li>可以通过git log看合并情况，如下图表示合并成功，然后输入git push --force推送到远程</li></ul><p><img src="https://raw.githubusercontent.com/nsnans/picGo-bed/main/vitepress_1x/202407011348452.png" alt="alt text" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.cnblogs.com/liuXiaoDi/p/17720189.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/liuXiaoDi/p/17720189.html</a></li><li><a href="https://blog.csdn.net/Albert_J/article/details/135759398" target="_blank" rel="noreferrer">https://blog.csdn.net/Albert_J/article/details/135759398</a></li></ul></div><h2 id="在-github-提交第一个-pull-request" tabindex="-1">在 GitHub 提交第一个 pull request <a class="header-anchor" href="#在-github-提交第一个-pull-request" aria-label="Permalink to &quot;在 GitHub 提交第一个 pull request&quot;">​</a></h2><ul><li><a href="https://www.freecodecamp.org/chinese/news/how-to-make-your-first-pull-request-on-github/" target="_blank" rel="noreferrer">https://www.freecodecamp.org/chinese/news/how-to-make-your-first-pull-request-on-github/</a></li></ul><h2 id="审核-pull-request" tabindex="-1">审核 pull request <a class="header-anchor" href="#审核-pull-request" aria-label="Permalink to &quot;审核 pull request&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/wohu1104/article/details/123218389" target="_blank" rel="noreferrer">https://blog.csdn.net/wohu1104/article/details/123218389</a></li></ul><h2 id="git-merge" tabindex="-1">git merge <a class="header-anchor" href="#git-merge" aria-label="Permalink to &quot;git merge&quot;">​</a></h2><p>功能：</p><ul><li>git merge将两个分支的历史记录合并在一起，创建一个新的合并提交（merge commit）。</li><li>合并后，两个分支的历史都会保留，分支的提交历史将会有一个合并点。</li></ul><p>使用场景：</p><ul><li>保持完整历史记录：当你希望保留每个分支的完整历史记录，包括所有的提交和合并点时使用git merge。</li><li>多团队协作：在团队协作开发中，git merge可以清晰地显示出分支的合并历史，有助于追踪变化。</li></ul><p>命令示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到主分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 合并 feature 分支到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/nsnans/picGo-bed/main/vitepress_1x/202407011349879.webp" alt="img" loading="lazy"></p><p>优点：</p><ul><li>保留完整的历史记录和分支结构。</li><li>解决冲突时可以明确看到冲突的来源。</li></ul><p>缺点：</p><ul><li>可能会产生多次合并提交，使历史记录较为复杂。</li></ul><h2 id="git-merge-squash" tabindex="-1">git merge --squash <a class="header-anchor" href="#git-merge-squash" aria-label="Permalink to &quot;git merge --squash&quot;">​</a></h2><p>功能：</p><ul><li>git merge --squash将一个分支的所有提交压缩成一个单独的提交进行合并。</li><li>不会产生合并提交，提交历史上只有一个新的提交。</li></ul><p>使用场景：</p><ul><li>简化历史记录：当你希望将一个功能分支的所有工作合并为一个提交，以简化提交历史时使用<code>git merge --squash</code>。</li><li>合并大量微小提交：如果一个分支上有大量的微小提交，可以使用squash将这些提交压缩成一个，避免提交历史过于冗长。</li></ul><p>命令示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到主分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 压缩合并 feature 分支的所有提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --squash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交合并后的更改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Squashed commit for feature&quot;</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/nsnans/picGo-bed/main/vitepress_1x/202407011349648.webp" alt="img" loading="lazy"></p><p>优点：</p><ul><li>提交历史更加简洁，便于阅读。</li><li>保持功能开发的独立性，合并时减少了历史记录的噪音。</li></ul><p>缺点：</p><ul><li>失去了详细的提交历史，无法追踪每个单独的提交。</li><li>也会产生一次提交，不过不是合并提交，就是普通提交。</li></ul><h2 id="git-rebase" tabindex="-1">git rebase <a class="header-anchor" href="#git-rebase" aria-label="Permalink to &quot;git rebase&quot;">​</a></h2><p>功能：</p><ul><li><code>git rebase</code>将一个分支的所有提交重新应用到另一个分支上，生成新的提交。</li><li>历史记录将被重写，避免创建合并提交。</li></ul><p>使用场景：</p><ul><li>保持线性历史：当你希望保持提交历史的线性结构，避免合并提交时使用<code>git rebase</code>。</li><li>整洁的提交历史：在个人开发或小团队合作中，可以使用<code>git rebase</code>保持整洁的提交历史，使日志记录更加简洁明了。</li></ul><p>命令示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到 feature 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 feature 分支的提交重新应用到 master 分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 合并 feature 分支到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/nsnans/picGo-bed/main/vitepress_1x/202407011349083.webp" alt="image.png" loading="lazy"></p><p>优点：</p><ul><li>保持线性的提交历史，日志记录更整洁。</li><li>合并后的历史更容易阅读和理解。</li></ul><p>缺点：</p><ul><li>需要解决所有提交的冲突，可能比较繁琐。</li><li>在公共分支上使用rebase可能导致混乱，建议仅在私有分支上使用。</li></ul><table tabindex="0"><thead><tr><th>特性</th><th>git merge</th><th>git merge --squash</th><th>git rebase</th></tr></thead><tbody><tr><td>历史记录</td><td>保留完整的历史记录和分支结构</td><td>将多个提交压缩成一个提交</td><td>重写历史，保持线性</td></tr><tr><td>合并提交</td><td>生成一个合并提交</td><td>不生成合并提交，只创建一个新的提交</td><td>不生成合并提交</td></tr><tr><td>冲突处理</td><td>解决合并点的冲突</td><td>解决合并时的冲突</td><td>解决每个提交的冲突</td></tr><tr><td>适用场景</td><td>保留完整历史，团队协作</td><td>简化历史，合并大量微小提交</td><td>整洁历史，个人或小团队开发</td></tr><tr><td>优点</td><td>清晰显示合并历史，解决冲突清晰</td><td>提交历史简洁，减少噪音</td><td>保持线性历史，日志记录简洁</td></tr><tr><td>缺点</td><td>可能产生多次合并提交，历史复杂</td><td>失去详细的提交历史</td><td>需要处理每个提交的冲突，公共分支上使用有风险</td></tr></tbody></table><p>选择适当的合并方法应根据具体的开发流程和团队需求来决定。 <code>git merge</code>适合需要保留完整历史记录的场景，而<code>git merge --squash</code>适合需要简化提交历史的场景，<code>git rebase</code>适合需要简洁线性历史的场景。</p>`,48))])}const y=n(k,[["render",d]]);export{m as __pageData,y as default};
