import{_ as s,c as i,a5 as a,o as l}from"./chunks/framework.DoSVD-D7.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"知识库/dart/dart/5-运算符.md","filePath":"知识库/dart/dart/5-运算符.md","lastUpdated":1728899331000}'),e={name:"知识库/dart/dart/5-运算符.md"};function n(h,t,d,k,p,r){return l(),i("div",null,t[0]||(t[0]=[a(`<h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p>参考<a href="https://dart.cn/language/operators" target="_blank" rel="noreferrer">https://dart.cn/language/operators</a></p><table tabindex="0"><thead><tr><th style="text-align:left;">Description</th><th style="text-align:left;">Operator</th><th style="text-align:left;">Associativity</th></tr></thead><tbody><tr><td style="text-align:left;">unary postfix</td><td style="text-align:left;">expr++ expr-- () [] ?[] . ?. !</td><td style="text-align:left;">None</td></tr><tr><td style="text-align:left;">unary prefix</td><td style="text-align:left;">-expr !expr ~expr ++expr --expr await expr</td><td style="text-align:left;">None</td></tr><tr><td style="text-align:left;">multiplicative</td><td style="text-align:left;">* / % ~/</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">additive</td><td style="text-align:left;">+ -</td><td style="text-align:left;">xxx</td></tr><tr><td style="text-align:left;">shift</td><td style="text-align:left;">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">bitwise AND</td><td style="text-align:left;">&amp;</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">bitwise XOR</td><td style="text-align:left;">^</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">bitwise OR</td><td style="text-align:left;">|</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">relational and type test</td><td style="text-align:left;">&gt;= &gt; &lt;= &lt; as is is!</td><td style="text-align:left;">None</td></tr><tr><td style="text-align:left;">equality</td><td style="text-align:left;">== !=</td><td style="text-align:left;">None</td></tr><tr><td style="text-align:left;">logical AND</td><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">logical OR</td><td style="text-align:left;">||</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">if null</td><td style="text-align:left;">??</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">conditional</td><td style="text-align:left;">expr1 ? expr2 : expr3</td><td style="text-align:left;">Right</td></tr><tr><td style="text-align:left;">cascade</td><td style="text-align:left;">.. ?..</td><td style="text-align:left;">Left</td></tr><tr><td style="text-align:left;">assignment</td><td style="text-align:left;">= *= /= += -= &amp;= ^= etc.</td><td style="text-align:left;">Right</td></tr></tbody></table><p>在 运算符表 中，运算符的优先级按先后排列，即第一行优先级最高，最后一行优先级最低，而同一行中，最左边的优先级最高，最右边的优先级最低。</p><blockquote><p>对于有两个操作数的运算符，左边的操作数决定了运算符的功能。比如对于一个 Vector 对象和一个 Point 对象，表达式 aVector + aPoint 中所使用的是 Vector 对象中定义的相加运算符 (+)。</p></blockquote><h3 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">加</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">减</td></tr><tr><td style="text-align:left;">-表达式</td><td style="text-align:left;">一元负, 也可以作为反转（反转表达式的符号）</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">乘</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">除</td></tr><tr><td style="text-align:left;">~/</td><td style="text-align:left;">除并取整</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">取模</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">++var</td><td style="text-align:left;">var = var + 1 (表达式的值为 var + 1)</td></tr><tr><td style="text-align:left;">var++</td><td style="text-align:left;">var = var + 1 (表达式的值为 var)</td></tr><tr><td style="text-align:left;">--var</td><td style="text-align:left;">var = var - 1 (表达式的值为 var - 1)</td></tr><tr><td style="text-align:left;">var--</td><td style="text-align:left;">var = var - 1 (表达式的值为 var)</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1">关系运算符 <a class="header-anchor" href="#关系运算符" aria-label="Permalink to &quot;关系运算符&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">相等</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">不等</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">大于等于</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">小于等于</td></tr></tbody></table><p>要判断两个对象 x 和 y 是否表示相同的事物使用 == 即可。（在极少数情况下，可能需要使用 identical() 函数来确定两个对象是否完全相同）。 下面是 == 运算符的一些规则：</p><ul><li>当 x 和 y 同时为空时返回 true，而只有一个为空时返回 false。</li><li>返回对 x 调用 == 方法的结果，参数为 y。（像 == 这样的操作符是对左侧内容进行调用的。详情请查阅 操作符。）</li></ul><h3 id="类型判断运算符" tabindex="-1">类型判断运算符 <a class="header-anchor" href="#类型判断运算符" aria-label="Permalink to &quot;类型判断运算符&quot;">​</a></h3><p>as、is、is! 运算符是在运行时判断对象类型的运算符。</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">as</td><td style="text-align:left;">类型转换（也用作指定 库前缀）</td></tr><tr><td style="text-align:left;">is</td><td style="text-align:left;">如果对象是指定类型则返回 true</td></tr><tr><td style="text-align:left;">is!</td><td style="text-align:left;">如果对象是指定类型则返回 false</td></tr></tbody></table><p>当且仅当 obj 实现了 T 的接口，obj is T 才是 true。例如 obj is Object 总为 true，因为所有类都是 Object 的子类。 仅当确定对象是该类型的时候，才可以使用 as 操作符把对象转换为特定的类型：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(employee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>如果不确定这个对象的类型是不是 T，需要在转型前使用 is T 检查类型：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (employee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Type check</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  employee.firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>上述两种方式是有区别的：如果 employee 为 null 或者不为 Person 类型，则第一种方式将会抛出异常，而第二种不会。</p></blockquote><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><p>可以使用 = 来赋值，同时也可以使用 ??= 来为值为 null 的变量赋值：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assign value to a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assign value to b if b is null; otherwise, b stays the same</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span></code></pre></div><p>除了 = 和 ??=，还有将算数运算符和赋值运算符组合在一起的赋值运算符：</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">运算符</th><th style="text-align:left;">运算符</th><th style="text-align:left;">运算符</th><th style="text-align:left;">运算符</th></tr></thead><tbody><tr><td style="text-align:left;">+=</td><td style="text-align:left;">-=</td><td style="text-align:left;">*=</td><td style="text-align:left;">/=</td><td style="text-align:left;">%=</td></tr><tr><td style="text-align:left;">~/=</td><td style="text-align:left;">&gt;&gt;&gt;=</td><td style="text-align:left;">&lt;&lt;=</td><td style="text-align:left;">&gt;&gt;=</td><td style="text-align:left;">^=</td></tr><tr><td style="text-align:left;">&amp;=</td><td style="text-align:left;">|=</td><td style="text-align:left;">=</td><td style="text-align:left;">??=</td><td style="text-align:left;"></td></tr></tbody></table><p>复合运算符的原理：</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">复合运算</th><th style="text-align:left;">等效表达式</th></tr></thead><tbody><tr><td style="text-align:left;">op</td><td style="text-align:left;">a op= b</td><td style="text-align:left;">a = a op b</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><p>使用逻辑运算符可以反转或组合布尔表达式：</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">!表达式</td><td style="text-align:left;">对表达式结果取反（即将 true 变为 false，false 变为 true）</td></tr><tr><td style="text-align:left;">||</td><td style="text-align:left;">逻辑或</td></tr><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">逻辑与</td></tr></tbody></table><p>使用逻辑表达式的示例：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...Do something...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-label="Permalink to &quot;位运算符&quot;">​</a></h3><p>在 Dart 中，二进制位运算符可以操作二进制的某一位，但仅适用于整数。 位运算符：</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&amp;</code></td><td style="text-align:left;">按位与</td></tr><tr><td style="text-align:left;">\`</td><td style="text-align:left;">\`</td></tr><tr><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">按位异或</td></tr><tr><td style="text-align:left;"><code>~表达式</code></td><td style="text-align:left;">按位取反（即将 “0” 变为 “1”，“1” 变为 “0”）</td></tr><tr><td style="text-align:left;"><code>&lt;&lt;</code></td><td style="text-align:left;">位左移</td></tr><tr><td style="text-align:left;"><code>&gt;&gt;</code></td><td style="text-align:left;">位右移</td></tr><tr><td style="text-align:left;"><code>&gt;&gt;&gt;</code></td><td style="text-align:left;">无符号右移</td></tr></tbody></table><p>位运算符示例：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bitmask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x0f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bitmask) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AND</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bitmask) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AND NOT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bitmask) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bitmask) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x2d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// XOR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x220</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Shift left</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Shift right</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unsigned shift right</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Shift right</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unsigned shift right</span></span></code></pre></div><h3 id="条件表达式" tabindex="-1">条件表达式 <a class="header-anchor" href="#条件表达式" aria-label="Permalink to &quot;条件表达式&quot;">​</a></h3><p>Dart 有两个特殊的运算符可以用来替代 if-else 语句：</p><ul><li>条件 ? 表达式 1 : 表达式 2 如果条件为 true，执行表达式 1并返回执行结果，否则执行表达式 2 并返回执行结果。</li><li>表达式 1 ?? 表达式 2 如果表达式 1 为非 null 则返回其值，否则执行表达式 2 并返回其值。</li></ul><h3 id="级联运算符" tabindex="-1">级联运算符 <a class="header-anchor" href="#级联运算符" aria-label="Permalink to &quot;级联运算符&quot;">​</a></h3><p>级联运算符 (.., ?..) 可以在同一个对象上连续调用多个对象的变量或方法： 对象不为 null：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> paint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ..color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.black</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ..strokeCap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StrokeCap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.round</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ..strokeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>如果对象可能为null：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> paint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPaint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.black</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ..strokeCap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StrokeCap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.round</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ..strokeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>级联运算符可以嵌套：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addressBook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AddressBookBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ..name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jenny&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ..email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jenny@example.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ..phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhoneNumberBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ..number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;415-555-0100&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ..label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>返回值为 void 的方法不能使用级联运算符：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ..</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: method &#39;write&#39; isn&#39;t defined for &#39;void&#39;.</span></span></code></pre></div><blockquote><p>严格来说 .. 级联操作并非一个运算符而是 Dart 的特殊语法。</p></blockquote><h3 id="其他运算符" tabindex="-1">其他运算符 <a class="header-anchor" href="#其他运算符" aria-label="Permalink to &quot;其他运算符&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">名字</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>()</code></td><td style="text-align:left;">使用方法</td><td style="text-align:left;">代表调用一个方法</td></tr><tr><td style="text-align:left;"><code>[]</code></td><td style="text-align:left;">访问 List</td><td style="text-align:left;">访问 List 中特定位置的元素</td></tr><tr><td style="text-align:left;"><code>?[]</code></td><td style="text-align:left;">判空访问 List</td><td style="text-align:left;">左侧调用者不为空时，访问 List 中特定位置的元素</td></tr><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">访问成员</td><td style="text-align:left;">成员访问符</td></tr><tr><td style="text-align:left;"><code>?.</code></td><td style="text-align:left;">条件访问成员</td><td style="text-align:left;">与上述成员访问符类似，但是左边的操作对象不能为 null，例如 foo?.bar，如果 foo 为 null 则返回 null ，否则返回 bar</td></tr><tr><td style="text-align:left;"><code>!</code></td><td style="text-align:left;">空断言操作符</td><td style="text-align:left;">将表达式的类型转换为其基础类型，如果转换失败会抛出运行时异常。例如 <code>foo!.bar</code>，如果 <code>foo</code> 为 null，则抛出运行时异常</td></tr></tbody></table>`,52)]))}const E=s(e,[["render",n]]);export{y as __pageData,E as default};
