import{_ as i,c as a,o as t,a5 as e}from"./chunks/framework.DRLXfOPz.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"知识库/dart/dart/11-异步支持.md","filePath":"知识库/dart/dart/11-异步支持.md","lastUpdated":1738741170000}'),n={name:"知识库/dart/dart/11-异步支持.md"};function l(h,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="异步支持" tabindex="-1">异步支持 <a class="header-anchor" href="#异步支持" aria-label="Permalink to &quot;异步支持&quot;">​</a></h2><p>Dart 代码库中有大量返回 <code>Future</code> 或 <code>Stream</code> 对象的函数，这些函数都是<strong>异步</strong>的，它们会在耗时操作（比如 I/O ）执行完毕前直接返回而不会等待耗时操作执行完毕。 <code>async</code> 和 <code>await</code> 关键字用于实现异步编程，并且让你的代码看起来就像是同步的一样。</p><h3 id="处理-future" tabindex="-1">处理 Future <a class="header-anchor" href="#处理-future" aria-label="Permalink to &quot;处理 Future&quot;">​</a></h3><p>必须在带有 <code>async</code> 关键字的<strong>异步函数</strong>中使用 <code>await</code>：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Do something with version</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>尽管 <code>async</code> 函数可能会执行一些耗时操作，但是并不会等待耗时操作完成，相反，会在遇到第一个 <code>await</code> 表达式时返回一个 <code>Future</code> 对象，然后等待 <code>await</code> 表达式执行完毕后继续执行。 使用 <code>try</code>、<code>catch</code> 以及 <code>finally</code> 来处理使用 <code>await</code> 导致的异常：</p></blockquote><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // React to inability to look up the version</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以在异步函数中多次使用 <code>await</code> 关键字：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entrypoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findEntryPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exitCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runExecutable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entrypoint, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flushThenExit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exitCode);</span></span></code></pre></div><blockquote><p><code>await</code> 表达式的返回值通常是一个 <code>Future</code> 对象；如果不是的话也会自动将其包裹在一个 <code>Future</code> 对象里。 <code>Future</code> 对象代表一个“承诺”， <code>await</code> 表达式会阻塞直到需要的对象返回。</p></blockquote><h3 id="声明异步函数" tabindex="-1">声明异步函数 <a class="header-anchor" href="#声明异步函数" aria-label="Permalink to &quot;声明异步函数&quot;">​</a></h3><p><strong>异步函数</strong>是函数体由 async 关键字标记的函数。 将关键字 <code>async</code> 添加到函数并让其返回一个 <code>Future</code> 对象：</p><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lookUpVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>函数体不需要使用 Future API。如有必要，Dart 会创建 <code>Future</code> 对象。 如果函数没有返回有效值，需要设置其返回类型为 <code>Future&lt;void&gt;</code>。</p><h3 id="处理-stream" tabindex="-1">处理 Stream <a class="header-anchor" href="#处理-stream" aria-label="Permalink to &quot;处理 Stream&quot;">​</a></h3><p>从 <code>Stream</code> 中获取值，可以有两种选择：</p><ul><li>使用 <code>async</code> 关键字和一个<strong>异步循环</strong>（使用 <code>await for</code> 关键字标识）。</li><li>使用 Stream API。 使用 <code>await for</code> 定义异步循环看起来是这样的：</li></ul><div class="language-Dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (varOrType identifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Executes each time the stream emits a value.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>表达式</code> 的类型必须是 Stream。执行流程如下：</p><ol><li>等待直到 Stream 返回一个数据。</li><li>使用 1 中 Stream 返回的数据执行循环体。</li><li>重复 1、2 过程直到 Stream 数据返回完毕。 使用 <code>break</code> 和 <code>return</code> 语句可以停止接收 Stream 数据，这样就跳出了循环并取消注册监听 Stream。</li></ol>`,20)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
