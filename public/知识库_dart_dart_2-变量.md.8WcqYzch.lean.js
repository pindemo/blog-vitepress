import{_ as s,c as t,a5 as i,o as n}from"./chunks/framework.51nBzb9L.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"知识库/dart/dart/2-变量.md","filePath":"知识库/dart/dart/2-变量.md","lastUpdated":1731055963000}'),e={name:"知识库/dart/dart/2-变量.md"};function l(o,a,h,r,p,d){return n(),t("div",null,a[0]||(a[0]=[i(`<h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>创建变量并将其初始化：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="默认值" tabindex="-1">默认值 <a class="header-anchor" href="#默认值" aria-label="Permalink to &quot;默认值&quot;">​</a></h3><p>未初始化以及可空类型的变量拥有一个默认的初始值 null</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lineCount;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lineCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>不需要在声明变量时初始化，只需在第一次用到这个变量前初始化即可。</p><h3 id="延迟初始化变量" tabindex="-1">延迟初始化变量 <a class="header-anchor" href="#延迟初始化变量" aria-label="Permalink to &quot;延迟初始化变量&quot;">​</a></h3><p>late 修饰符，可以延迟初始化变量。</p><blockquote><p>若 late 标记的变量在使用前没有初始化，在变量被使用时会抛出运行时异常。 如果一个 late 修饰的变量在声明时就指定了初始化方法，那么它实际的初始化过程会发生在第一次被使用的时候。 比如在变量是当前时间时，会在使用变量时初始化</p></blockquote><h3 id="final-和-const" tabindex="-1">final 和 const <a class="header-anchor" href="#final-和-const" aria-label="Permalink to &quot;final 和 const&quot;">​</a></h3><p>如果不想更改一个变量，可以使用关键字 final 或者 const 修饰变量，这两个关键字可以替代 var 关键字或者加在一个具体的类型前。 没有使用 final 或 const 修饰的变量的值是可以被更改的。</p><h3 id="final" tabindex="-1">final <a class="header-anchor" href="#final" aria-label="Permalink to &quot;final&quot;">​</a></h3><p>一个 final 变量只可以被赋值一次，一个 const 变量是一个编译时常量 (const 变量同时也是 final 的)。</p><blockquote><p>实例变量 可以是 final 的但不可以是 const。 不能修改一个 final 变量的值。</p></blockquote><h3 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h3><p>使用关键字 const 修饰变量表示该变量为 编译时常量。 如果使用 const 修饰类中的变量，则必须加上 static 关键字，即 static const（顺序不能颠倒）。 在声明 const 变量时可以直接为其赋值，也可以使用其它的 const 变量为其赋值。 const 关键字不仅仅可以用来定义常量，还可以用来创建 常量值，该常量值可以赋予给任何变量。 可以将构造函数声明为 const 的，这种类型的构造函数创建的对象是不可改变的。</p>`,17)]))}const u=s(e,[["render",l]]);export{k as __pageData,u as default};
